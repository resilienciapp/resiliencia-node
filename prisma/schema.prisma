datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int            @id              @default(autoincrement())
  created_at   DateTime       @db.Timestamp(6) @default(now())
  updated_at   DateTime       @db.Timestamp(6) @default(now()) @updatedAt
  email        String         @db.VarChar      @unique
  password     String         @db.VarChar
  name         String         @db.VarChar
  device       Device[]
  notification Notification[]
  request      Request[]
  subscription Subscription[]

  @@index([email])
  @@map("users")
}

model Marker {
  id           Int            @id              @default(autoincrement())
  created_at   DateTime       @db.Timestamp(6) @default(now())
  updated_at   DateTime       @db.Timestamp(6) @default(now()) @updatedAt
  expires_at   DateTime?      @db.Timestamp(6)
  confirmed_at DateTime       @db.Timestamp(6) @default(now())
  name         String         @db.VarChar
  duration     Int
  latitude     Float
  longitude    Float
  description  String?        @db.VarChar
  recurrence   String         @db.VarChar
  category_id  Int
  category     Category       @relation(fields: [category_id], references: [id])
  owners       Int[]
  request      Request[]
  subscription Subscription[]

  @@index([category_id])
  @@map("markers")
}

model Category {
  id          Int      @id              @default(autoincrement())
  created_at  DateTime @db.Timestamp(6) @default(now())
  updated_at  DateTime @db.Timestamp(6) @default(now()) @updatedAt
  name        String   @db.VarChar      @unique
  description String?  @db.VarChar
  color       String   @db.VarChar      @default("#000000")
  marker      Marker[]

  @@map("categories")
}

model Subscription {
  id         Int      @id              @default(autoincrement())
  created_at DateTime @db.Timestamp(6) @default(now())
  updated_at DateTime @db.Timestamp(6) @default(now()) @updatedAt
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  marker_id  Int
  marker     Marker   @relation(fields: [marker_id], references: [id])

  @@index([user_id])
  @@index([marker_id])
  @@unique([user_id, marker_id])
  @@map("subscriptions")
}

model Request {
  id           Int            @id              @default(autoincrement())
  created_at   DateTime       @db.Timestamp(6) @default(now())
  updated_at   DateTime       @db.Timestamp(6) @default(now()) @updatedAt
  expires_at   DateTime?      @db.Timestamp(6)
  description  String         @db.VarChar
  notifiable   Boolean
  user_id      Int
  user         User           @relation(fields: [user_id], references: [id])
  marker_id    Int
  marker       Marker         @relation(fields: [marker_id], references: [id])
  notification Notification[]

  @@index([user_id])
  @@index([marker_id])
  @@map("requests")
}

model Device {
  id          Int             @id              @default(autoincrement())
  created_at  DateTime        @db.Timestamp(6) @default(now())
  updated_at  DateTime        @db.Timestamp(6) @default(now()) @updatedAt
  token        String         @db.VarChar
  user_id      Int
  user         User           @relation(fields: [user_id], references: [id])
  device_id    String         @db.VarChar      @unique
  platform     Platform
  notification Notification[]

  @@index([user_id])
  @@index([device_id])
  @@map("devices")
}

model Notification {
  id          Int              @id              @default(autoincrement())
  created_at  DateTime         @db.Timestamp(6) @default(now())
  updated_at  DateTime         @db.Timestamp(6) @default(now()) @updatedAt
  user_id     Int
  user        User             @relation(fields: [user_id], references: [id])
  request_id  Int
  request     Request          @relation(fields: [request_id], references: [id])
  type        NotificationType
  device_id   Int
  device      Device           @relation(fields: [device_id], references: [id])

  @@index([user_id])
  @@map("notifications")
}

enum Platform {
  android
  ios

  @@map("platform")
}

enum NotificationType {
  email
  push_notification
}
